# Development Dockerfile - optimized for fast rebuilds and live development
FROM ubuntu:24.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
# GPU environment variables disabled for development
# ENV NVIDIA_VISIBLE_DEVICES=all
# ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV RUST_LOG=debug
ENV PATH="/root/.cargo/bin:${PATH}"

# Install system dependencies (this layer is cached)
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg2 \
    software-properties-common \
    openssh-server \
    sudo \
    htop \
    nano \
    vim \
    git \
    python3 \
    python3-pip \
    nodejs \
    npm \
    build-essential \
    pkg-config \
    libssl-dev \
    inotify-tools \
    && rm -rf /var/lib/apt/lists/*

# Install ZeroTier (this layer is cached)
RUN curl -s https://install.zerotier.com | bash

# Install Rust (this layer is cached)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && /root/.cargo/bin/rustup component add clippy rustfmt

# Install cargo-watch for auto-rebuilding during development
RUN /root/.cargo/bin/cargo install cargo-watch

# Configure SSH (this layer is cached)
RUN mkdir /var/run/sshd
RUN echo 'root:rental_access_2024' | chpasswd
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
RUN sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config

# Create a non-root user for safer operations
RUN useradd -m -s /bin/bash rental && \
    echo 'rental:rental_user_2024' | chpasswd && \
    usermod -aG sudo rental

# Create workspace directory
RUN mkdir -p /workspace/rental /workspace/client
RUN chown -R rental:rental /workspace/

# Set up Rust environment for rental user
USER rental
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/home/rental/.cargo/bin:${PATH}"
RUN /home/rental/.cargo/bin/cargo install cargo-watch

# Switch back to root for service management
USER root

# Create development startup script
COPY docker-entrypoint.dev.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.dev.sh

# Expose ports
EXPOSE 22 8080 3000

# Set working directory
WORKDIR /workspace

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.dev.sh"]
