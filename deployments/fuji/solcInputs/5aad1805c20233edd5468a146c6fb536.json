{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "blockchain/contracts/EryzaJobsLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title EryzaJobsLedger\n * @dev Comprehensive job tracking and analytics ledger for Eryza platform\n * @author Eryza Team\n */\ncontract EryzaJobsLedger is Ownable, ReentrancyGuard {\n    \n    // Job execution phases\n    enum JobPhase {\n        Submitted,      // 0 - Job submitted to ledger\n        Funded,         // 1 - Payment escrowed\n        Assigned,       // 2 - Assigned to compute node\n        Running,        // 3 - Currently executing\n        Validating,     // 4 - Output validation in progress\n        Completed,      // 5 - Successfully completed\n        Failed,         // 6 - Failed during execution\n        Disputed,       // 7 - Under dispute resolution\n        Cancelled,      // 8 - Cancelled by client\n        Refunded        // 9 - Payment refunded\n    }\n\n    // Job priority levels\n    enum Priority {\n        Low,        // 0 - Standard processing\n        Normal,     // 1 - Default priority\n        High,       // 2 - Expedited processing\n        Urgent      // 3 - Highest priority\n    }\n\n    // Job execution results\n    enum ExecutionResult {\n        Pending,        // 0 - Not yet executed\n        Success,        // 1 - Completed successfully\n        Failed,         // 2 - Execution failed\n        TimedOut,       // 3 - Exceeded time limit\n        Cancelled,      // 4 - Cancelled by user\n        NodeOffline,    // 5 - Node went offline\n        InvalidOutput   // 6 - Output validation failed\n    }\n\n    // Comprehensive job record\n    struct JobRecord {\n        uint256 jobId;\n        address client;\n        address provider;\n        uint256 nodeId;\n        string jobType;          // \"training\", \"inference\", \"compute\", \"ssh\"\n        string jobDescription;\n        string inputDataHash;    // IPFS hash of input data\n        string outputDataHash;   // IPFS hash of output data\n        string configHash;       // IPFS hash of job configuration\n        uint256 estimatedDuration; // In seconds\n        uint256 actualDuration;    // Actual execution time\n        uint256 totalCost;         // Total cost in wei\n        uint256 submitTime;\n        uint256 startTime;\n        uint256 endTime;\n        JobPhase currentPhase;\n        Priority priority;\n        ExecutionResult result;\n        uint8 qualityScore;      // 0-100 quality rating\n        bool isPrivate;          // Privacy flag\n        string metadata;         // Additional metadata JSON\n    }\n\n    // Job execution metrics\n    struct ExecutionMetrics {\n        uint256 cpuUsage;        // Average CPU usage %\n        uint256 memoryUsage;     // Average memory usage %\n        uint256 gpuUsage;        // Average GPU usage %\n        uint256 networkIO;       // Network I/O in bytes\n        uint256 diskIO;          // Disk I/O in bytes\n        uint256 energyConsumed;  // Energy consumption in Wh\n        string performanceData;  // Additional performance JSON\n    }\n\n    // Node performance analytics\n    struct NodePerformance {\n        uint256 totalJobs;\n        uint256 successfulJobs;\n        uint256 failedJobs;\n        uint256 totalRevenue;\n        uint256 totalExecutionTime;\n        uint256 averageQualityScore;\n        uint256 uptime;          // Total uptime in seconds\n        uint256 lastActiveTime;\n        uint8 reliabilityScore;  // 0-100 reliability rating\n    }\n\n    // Client usage analytics\n    struct ClientAnalytics {\n        uint256 totalJobsSubmitted;\n        uint256 totalSpent;\n        uint256 totalExecutionTime;\n        uint256 averageJobDuration;\n        uint256 successfulJobs;\n        uint256 lastActivity;\n        uint8 reputationScore;   // 0-100 reputation rating\n    }\n\n    // Events\n    event JobSubmitted(\n        uint256 indexed jobId,\n        address indexed client,\n        string jobType,\n        Priority priority,\n        uint256 estimatedDuration\n    );\n    \n    event JobPhaseChanged(\n        uint256 indexed jobId,\n        JobPhase oldPhase,\n        JobPhase newPhase,\n        uint256 timestamp\n    );\n    \n    event JobAssigned(\n        uint256 indexed jobId,\n        address indexed provider,\n        uint256 indexed nodeId,\n        uint256 assignedTime\n    );\n    \n    event JobExecutionStarted(\n        uint256 indexed jobId,\n        uint256 startTime\n    );\n    \n    event JobCompleted(\n        uint256 indexed jobId,\n        ExecutionResult result,\n        uint256 actualDuration,\n        uint8 qualityScore\n    );\n    \n    event MetricsRecorded(\n        uint256 indexed jobId,\n        uint256 cpuUsage,\n        uint256 memoryUsage,\n        uint256 gpuUsage\n    );\n    \n    event QualityScoreUpdated(\n        uint256 indexed jobId,\n        uint8 oldScore,\n        uint8 newScore,\n        address scorer\n    );\n\n    // State variables\n    uint256 public nextJobId = 1;\n    address public marketplaceContract;\n    IERC20 public eryzeToken;\n    \n    // Mappings\n    mapping(uint256 => JobRecord) public jobs;\n    mapping(uint256 => ExecutionMetrics) public executionMetrics;\n    mapping(address => NodePerformance) public nodePerformance;\n    mapping(address => ClientAnalytics) public clientAnalytics;\n    mapping(uint256 => address[]) public jobValidators; // Validators for job quality\n    \n    // Job phase history tracking\n    mapping(uint256 => JobPhase[]) public jobPhaseHistory;\n    mapping(uint256 => uint256[]) public jobPhaseTimestamps;\n    \n    // Analytics arrays\n    mapping(address => uint256[]) public clientJobHistory;\n    mapping(address => uint256[]) public providerJobHistory;\n    mapping(uint256 => uint256[]) public nodeJobHistory;\n    \n    // Quality and reputation\n    mapping(uint256 => mapping(address => uint8)) public jobRatings;\n    mapping(address => uint8) public providerReputation;\n    mapping(address => uint8) public clientReputation;\n\n    // Modifiers\n    modifier onlyMarketplace() {\n        require(msg.sender == marketplaceContract, \"Only marketplace can call\");\n        _;\n    }\n\n    modifier onlyJobParticipant(uint256 jobId) {\n        JobRecord memory job = jobs[jobId];\n        require(\n            msg.sender == job.client || \n            msg.sender == job.provider || \n            msg.sender == marketplaceContract,\n            \"Not authorized\"\n        );\n        _;\n    }\n\n    constructor(address _eryzeToken) Ownable(msg.sender) {\n        eryzeToken = IERC20(_eryzeToken);\n    }\n\n    /**\n     * @dev Set the marketplace contract address\n     */\n    function setMarketplaceContract(address _marketplace) external onlyOwner {\n        marketplaceContract = _marketplace;\n    }\n\n    /**\n     * @dev Submit a new job to the ledger\n     */\n    function submitJob(\n        address client,\n        string memory jobType,\n        string memory description,\n        string memory inputDataHash,\n        string memory configHash,\n        uint256 estimatedDuration,\n        uint256 totalCost,\n        Priority priority,\n        bool isPrivate,\n        string memory metadata\n    ) external onlyMarketplace returns (uint256) {\n        \n        uint256 jobId = nextJobId++;\n        \n        jobs[jobId] = JobRecord({\n            jobId: jobId,\n            client: client,\n            provider: address(0),\n            nodeId: 0,\n            jobType: jobType,\n            jobDescription: description,\n            inputDataHash: inputDataHash,\n            outputDataHash: \"\",\n            configHash: configHash,\n            estimatedDuration: estimatedDuration,\n            actualDuration: 0,\n            totalCost: totalCost,\n            submitTime: block.timestamp,\n            startTime: 0,\n            endTime: 0,\n            currentPhase: JobPhase.Submitted,\n            priority: priority,\n            result: ExecutionResult.Pending,\n            qualityScore: 0,\n            isPrivate: isPrivate,\n            metadata: metadata\n        });\n\n        // Initialize phase history\n        jobPhaseHistory[jobId].push(JobPhase.Submitted);\n        jobPhaseTimestamps[jobId].push(block.timestamp);\n        \n        // Update client analytics\n        clientJobHistory[client].push(jobId);\n        clientAnalytics[client].totalJobsSubmitted++;\n        clientAnalytics[client].totalSpent += totalCost;\n        clientAnalytics[client].lastActivity = block.timestamp;\n\n        emit JobSubmitted(jobId, client, jobType, priority, estimatedDuration);\n        \n        return jobId;\n    }\n\n    /**\n     * @dev Update job phase\n     */\n    function updateJobPhase(uint256 jobId, JobPhase newPhase) \n        external \n        onlyJobParticipant(jobId) \n    {\n        JobRecord storage job = jobs[jobId];\n        JobPhase oldPhase = job.currentPhase;\n        \n        require(oldPhase != newPhase, \"Phase unchanged\");\n        require(_isValidPhaseTransition(oldPhase, newPhase), \"Invalid phase transition\");\n        \n        job.currentPhase = newPhase;\n        \n        // Record phase history\n        jobPhaseHistory[jobId].push(newPhase);\n        jobPhaseTimestamps[jobId].push(block.timestamp);\n        \n        emit JobPhaseChanged(jobId, oldPhase, newPhase, block.timestamp);\n    }\n\n    /**\n     * @dev Assign job to a provider and node\n     */\n    function assignJob(\n        uint256 jobId,\n        address provider,\n        uint256 nodeId\n    ) external onlyMarketplace {\n        \n        JobRecord storage job = jobs[jobId];\n        require(job.currentPhase == JobPhase.Funded, \"Job must be funded\");\n        \n        job.provider = provider;\n        job.nodeId = nodeId;\n        job.currentPhase = JobPhase.Assigned;\n        \n        // Update provider job history\n        providerJobHistory[provider].push(jobId);\n        nodeJobHistory[nodeId].push(jobId);\n        \n        // Record phase change\n        jobPhaseHistory[jobId].push(JobPhase.Assigned);\n        jobPhaseTimestamps[jobId].push(block.timestamp);\n        \n        emit JobAssigned(jobId, provider, nodeId, block.timestamp);\n    }\n\n    /**\n     * @dev Start job execution\n     */\n    function startJobExecution(uint256 jobId) external {\n        JobRecord storage job = jobs[jobId];\n        require(msg.sender == job.provider, \"Only provider can start\");\n        require(job.currentPhase == JobPhase.Assigned, \"Job must be assigned\");\n        \n        job.startTime = block.timestamp;\n        job.currentPhase = JobPhase.Running;\n        \n        // Record phase change\n        jobPhaseHistory[jobId].push(JobPhase.Running);\n        jobPhaseTimestamps[jobId].push(block.timestamp);\n        \n        emit JobExecutionStarted(jobId, block.timestamp);\n    }\n\n    /**\n     * @dev Complete job execution\n     */\n    function completeJob(\n        uint256 jobId,\n        ExecutionResult result,\n        string memory outputDataHash,\n        uint8 qualityScore\n    ) external {\n        JobRecord storage job = jobs[jobId];\n        require(msg.sender == job.provider, \"Only provider can complete\");\n        require(job.currentPhase == JobPhase.Running, \"Job must be running\");\n        require(qualityScore <= 100, \"Invalid quality score\");\n        \n        job.endTime = block.timestamp;\n        job.actualDuration = job.endTime - job.startTime;\n        job.result = result;\n        job.outputDataHash = outputDataHash;\n        job.qualityScore = qualityScore;\n        \n        // Update phase based on result\n        if (result == ExecutionResult.Success) {\n            job.currentPhase = JobPhase.Completed;\n            nodePerformance[job.provider].successfulJobs++;\n            clientAnalytics[job.client].successfulJobs++;\n        } else {\n            job.currentPhase = JobPhase.Failed;\n            nodePerformance[job.provider].failedJobs++;\n        }\n        \n        // Update node performance\n        NodePerformance storage perf = nodePerformance[job.provider];\n        perf.totalJobs++;\n        perf.totalExecutionTime += job.actualDuration;\n        perf.totalRevenue += job.totalCost;\n        perf.lastActiveTime = block.timestamp;\n        \n        // Update average quality score\n        if (perf.totalJobs > 0) {\n            perf.averageQualityScore = (perf.averageQualityScore * (perf.totalJobs - 1) + qualityScore) / perf.totalJobs;\n        }\n        \n        // Update client analytics\n        ClientAnalytics storage clientStats = clientAnalytics[job.client];\n        clientStats.totalExecutionTime += job.actualDuration;\n        if (clientStats.totalJobsSubmitted > 0) {\n            clientStats.averageJobDuration = clientStats.totalExecutionTime / clientStats.totalJobsSubmitted;\n        }\n        \n        // Record phase change\n        jobPhaseHistory[jobId].push(job.currentPhase);\n        jobPhaseTimestamps[jobId].push(block.timestamp);\n        \n        emit JobCompleted(jobId, result, job.actualDuration, qualityScore);\n    }\n\n    /**\n     * @dev Record execution metrics during job execution\n     */\n    function recordExecutionMetrics(\n        uint256 jobId,\n        uint256 cpuUsage,\n        uint256 memoryUsage,\n        uint256 gpuUsage,\n        uint256 networkIO,\n        uint256 diskIO,\n        uint256 energyConsumed,\n        string memory performanceData\n    ) external {\n        JobRecord memory job = jobs[jobId];\n        require(msg.sender == job.provider, \"Only provider can record metrics\");\n        require(job.currentPhase == JobPhase.Running, \"Job must be running\");\n        \n        executionMetrics[jobId] = ExecutionMetrics({\n            cpuUsage: cpuUsage,\n            memoryUsage: memoryUsage,\n            gpuUsage: gpuUsage,\n            networkIO: networkIO,\n            diskIO: diskIO,\n            energyConsumed: energyConsumed,\n            performanceData: performanceData\n        });\n        \n        emit MetricsRecorded(jobId, cpuUsage, memoryUsage, gpuUsage);\n    }\n\n    /**\n     * @dev Rate job quality (can be called by client or validators)\n     */\n    function rateJobQuality(uint256 jobId, uint8 rating) external {\n        JobRecord storage job = jobs[jobId];\n        require(\n            msg.sender == job.client || _isValidator(jobId, msg.sender),\n            \"Not authorized to rate\"\n        );\n        require(rating <= 100, \"Invalid rating\");\n        require(job.currentPhase == JobPhase.Completed, \"Job not completed\");\n        \n        uint8 oldScore = job.qualityScore;\n        jobRatings[jobId][msg.sender] = rating;\n        \n        // Recalculate average quality score\n        job.qualityScore = _calculateAverageRating(jobId);\n        \n        emit QualityScoreUpdated(jobId, oldScore, job.qualityScore, msg.sender);\n    }\n\n    /**\n     * @dev Add validator for job quality assessment\n     */\n    function addJobValidator(uint256 jobId, address validator) external onlyOwner {\n        jobValidators[jobId].push(validator);\n    }\n\n    /**\n     * @dev Get job details\n     */\n    function getJob(uint256 jobId) external view returns (JobRecord memory) {\n        return jobs[jobId];\n    }\n\n    /**\n     * @dev Get job execution metrics\n     */\n    function getJobMetrics(uint256 jobId) external view returns (ExecutionMetrics memory) {\n        return executionMetrics[jobId];\n    }\n\n    /**\n     * @dev Get job phase history\n     */\n    function getJobPhaseHistory(uint256 jobId) \n        external \n        view \n        returns (JobPhase[] memory phases, uint256[] memory timestamps) \n    {\n        return (jobPhaseHistory[jobId], jobPhaseTimestamps[jobId]);\n    }\n\n    /**\n     * @dev Get node performance analytics\n     */\n    function getNodePerformance(address provider) external view returns (NodePerformance memory) {\n        return nodePerformance[provider];\n    }\n\n    /**\n     * @dev Get client analytics\n     */\n    function getClientAnalytics(address client) external view returns (ClientAnalytics memory) {\n        return clientAnalytics[client];\n    }\n\n    /**\n     * @dev Get client's job history\n     */\n    function getClientJobHistory(address client) external view returns (uint256[] memory) {\n        return clientJobHistory[client];\n    }\n\n    /**\n     * @dev Get provider's job history\n     */\n    function getProviderJobHistory(address provider) external view returns (uint256[] memory) {\n        return providerJobHistory[provider];\n    }\n\n    /**\n     * @dev Get node's job history\n     */\n    function getNodeJobHistory(uint256 nodeId) external view returns (uint256[] memory) {\n        return nodeJobHistory[nodeId];\n    }\n\n    /**\n     * @dev Get jobs by status\n     */\n    function getJobsByPhase(JobPhase phase) external view returns (uint256[] memory) {\n        uint256 count = 0;\n        \n        // Count jobs with the specified phase\n        for (uint256 i = 1; i < nextJobId; i++) {\n            if (jobs[i].currentPhase == phase) {\n                count++;\n            }\n        }\n        \n        uint256[] memory jobIds = new uint256[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 1; i < nextJobId; i++) {\n            if (jobs[i].currentPhase == phase) {\n                jobIds[index] = i;\n                index++;\n            }\n        }\n        \n        return jobIds;\n    }\n\n    /**\n     * @dev Get platform analytics\n     */\n    function getPlatformAnalytics() \n        external \n        view \n        returns (\n            uint256 totalJobs,\n            uint256 completedJobs,\n            uint256 failedJobs,\n            uint256 totalRevenue,\n            uint256 averageJobDuration\n        ) \n    {\n        totalJobs = nextJobId - 1;\n        uint256 totalDuration = 0;\n        \n        for (uint256 i = 1; i < nextJobId; i++) {\n            JobRecord memory job = jobs[i];\n            if (job.currentPhase == JobPhase.Completed) {\n                completedJobs++;\n                totalDuration += job.actualDuration;\n            } else if (job.currentPhase == JobPhase.Failed) {\n                failedJobs++;\n            }\n            totalRevenue += job.totalCost;\n        }\n        \n        if (completedJobs > 0) {\n            averageJobDuration = totalDuration / completedJobs;\n        }\n    }\n\n    // Internal functions\n    function _isValidPhaseTransition(JobPhase from, JobPhase to) internal pure returns (bool) {\n        // Define valid state transitions\n        if (from == JobPhase.Submitted) return to == JobPhase.Funded || to == JobPhase.Cancelled;\n        if (from == JobPhase.Funded) return to == JobPhase.Assigned || to == JobPhase.Refunded;\n        if (from == JobPhase.Assigned) return to == JobPhase.Running || to == JobPhase.Cancelled;\n        if (from == JobPhase.Running) return to == JobPhase.Validating || to == JobPhase.Failed;\n        if (from == JobPhase.Validating) return to == JobPhase.Completed || to == JobPhase.Disputed;\n        if (from == JobPhase.Disputed) return to == JobPhase.Completed || to == JobPhase.Refunded;\n        \n        return false;\n    }\n\n    function _isValidator(uint256 jobId, address validator) internal view returns (bool) {\n        address[] memory validators = jobValidators[jobId];\n        for (uint256 i = 0; i < validators.length; i++) {\n            if (validators[i] == validator) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _calculateAverageRating(uint256 jobId) internal view returns (uint8) {\n        // This is a simplified calculation. In production, you might want to\n        // weight ratings from different sources differently\n        JobRecord memory job = jobs[jobId];\n        uint256 totalRating = 0;\n        uint256 ratingCount = 0;\n        \n        // Include client rating\n        if (jobRatings[jobId][job.client] > 0) {\n            totalRating += jobRatings[jobId][job.client];\n            ratingCount++;\n        }\n        \n        // Include validator ratings\n        address[] memory validators = jobValidators[jobId];\n        for (uint256 i = 0; i < validators.length; i++) {\n            if (jobRatings[jobId][validators[i]] > 0) {\n                totalRating += jobRatings[jobId][validators[i]];\n                ratingCount++;\n            }\n        }\n        \n        if (ratingCount == 0) return 0;\n        return uint8(totalRating / ratingCount);\n    }\n\n    /**\n     * @dev Emergency pause functionality\n     */\n    function pause() external onlyOwner {\n        // Implementation for pausing contract if needed\n    }\n\n    /**\n     * @dev Update provider reputation score\n     */\n    function updateProviderReputation(address provider, uint8 newScore) external onlyOwner {\n        require(newScore <= 100, \"Invalid score\");\n        providerReputation[provider] = newScore;\n    }\n\n    /**\n     * @dev Update client reputation score\n     */\n    function updateClientReputation(address client, uint8 newScore) external onlyOwner {\n        require(newScore <= 100, \"Invalid score\");\n        clientReputation[client] = newScore;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}