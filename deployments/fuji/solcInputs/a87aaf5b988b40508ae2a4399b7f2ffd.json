{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "blockchain/contracts/EryzaComputeMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title EryzaComputeMarketplace\n * @dev Smart contract for managing compute resource marketplace on Avalanche\n */\ncontract EryzaComputeMarketplace is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    // Events\n    event ComputeNodeRegistered(address indexed provider, uint256 indexed nodeId, uint256 pricePerHour);\n    event ComputeJobCreated(uint256 indexed jobId, address indexed client, uint256 indexed nodeId, uint256 duration);\n    event ComputeJobStarted(uint256 indexed jobId, uint256 startTime);\n    event ComputeJobCompleted(uint256 indexed jobId, uint256 endTime);\n    event PaymentReleased(uint256 indexed jobId, address indexed provider, uint256 amount);\n    event DisputeRaised(uint256 indexed jobId, address indexed raiser, string reason);\n    event DisputeResolved(uint256 indexed jobId, bool favorProvider);\n\n    // Structs\n    struct ComputeNode {\n        address provider;\n        string nodeType; // \"ssh\", \"training\", \"edge\"\n        uint256 cpuCores;\n        uint256 memoryGB;\n        uint256 gpuCount;\n        string gpuType;\n        uint256 pricePerHour; // in wei\n        bool available;\n        uint256 totalJobs;\n        uint256 successfulJobs;\n        string endpoint; // ZeroTier IP or connection string\n    }\n\n    struct ComputeJob {\n        uint256 nodeId;\n        address client;\n        address provider;\n        uint256 duration; // in hours\n        uint256 totalCost;\n        uint256 startTime;\n        uint256 endTime;\n        JobStatus status;\n        string jobType; // \"ssh\", \"training\", \"inference\", \"edge\"\n        string jobConfig; // IPFS hash or config string\n        bool disputed;\n        address disputer;\n        string disputeReason;\n    }\n\n    enum JobStatus {\n        Created,\n        Funded,\n        Started,\n        Completed,\n        Cancelled,\n        Disputed\n    }\n\n    // State variables\n    IERC20 public paymentToken; // AVAX or wrapped AVAX\n    uint256 public constant PLATFORM_FEE_PERCENT = 250; // 2.5%\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public disputeTimeWindow = 24 hours;\n    \n    uint256 private nextNodeId = 1;\n    uint256 private nextJobId = 1;\n    \n    mapping(uint256 => ComputeNode) public computeNodes;\n    mapping(uint256 => ComputeJob) public computeJobs;\n    mapping(address => uint256[]) public providerNodes;\n    mapping(address => uint256[]) public clientJobs;\n    mapping(uint256 => uint256) public nodeActiveJobs;\n    \n    // Escrow balances\n    mapping(uint256 => uint256) public jobEscrow;\n    \n    constructor(address _paymentToken) Ownable(msg.sender) {\n        paymentToken = IERC20(_paymentToken);\n    }\n\n    /**\n     * @dev Register a new compute node\n     */\n    function registerComputeNode(\n        string memory nodeType,\n        uint256 cpuCores,\n        uint256 memoryGB,\n        uint256 gpuCount,\n        string memory gpuType,\n        uint256 pricePerHour,\n        string memory endpoint\n    ) external returns (uint256) {\n        require(pricePerHour > 0, \"Price must be greater than 0\");\n        require(cpuCores > 0, \"CPU cores must be greater than 0\");\n        require(memoryGB > 0, \"Memory must be greater than 0\");\n\n        uint256 nodeId = nextNodeId++;\n        \n        computeNodes[nodeId] = ComputeNode({\n            provider: msg.sender,\n            nodeType: nodeType,\n            cpuCores: cpuCores,\n            memoryGB: memoryGB,\n            gpuCount: gpuCount,\n            gpuType: gpuType,\n            pricePerHour: pricePerHour,\n            available: true,\n            totalJobs: 0,\n            successfulJobs: 0,\n            endpoint: endpoint\n        });\n        \n        providerNodes[msg.sender].push(nodeId);\n        \n        emit ComputeNodeRegistered(msg.sender, nodeId, pricePerHour);\n        \n        return nodeId;\n    }\n\n    /**\n     * @dev Update compute node availability\n     */\n    function updateNodeAvailability(uint256 nodeId, bool available) external {\n        require(computeNodes[nodeId].provider == msg.sender, \"Not node owner\");\n        computeNodes[nodeId].available = available;\n    }\n\n    /**\n     * @dev Update compute node pricing\n     */\n    function updateNodePrice(uint256 nodeId, uint256 newPrice) external {\n        require(computeNodes[nodeId].provider == msg.sender, \"Not node owner\");\n        require(newPrice > 0, \"Price must be greater than 0\");\n        computeNodes[nodeId].pricePerHour = newPrice;\n    }\n\n    /**\n     * @dev Create a new compute job\n     */\n    function createComputeJob(\n        uint256 nodeId,\n        uint256 duration,\n        string memory jobType,\n        string memory jobConfig\n    ) external returns (uint256) {\n        require(computeNodes[nodeId].available, \"Node not available\");\n        require(duration > 0, \"Duration must be greater than 0\");\n        \n        ComputeNode storage node = computeNodes[nodeId];\n        uint256 totalCost = node.pricePerHour * duration;\n        uint256 platformFee = (totalCost * PLATFORM_FEE_PERCENT) / BASIS_POINTS;\n        uint256 totalAmount = totalCost + platformFee;\n        \n        uint256 jobId = nextJobId++;\n        \n        computeJobs[jobId] = ComputeJob({\n            nodeId: nodeId,\n            client: msg.sender,\n            provider: node.provider,\n            duration: duration,\n            totalCost: totalCost,\n            startTime: 0,\n            endTime: 0,\n            status: JobStatus.Created,\n            jobType: jobType,\n            jobConfig: jobConfig,\n            disputed: false,\n            disputer: address(0),\n            disputeReason: \"\"\n        });\n        \n        clientJobs[msg.sender].push(jobId);\n        \n        // Transfer payment to escrow\n        paymentToken.safeTransferFrom(msg.sender, address(this), totalAmount);\n        jobEscrow[jobId] = totalAmount;\n        \n        computeJobs[jobId].status = JobStatus.Funded;\n        \n        emit ComputeJobCreated(jobId, msg.sender, nodeId, duration);\n        \n        return jobId;\n    }\n\n    /**\n     * @dev Start a compute job (called by provider)\n     */\n    function startComputeJob(uint256 jobId) external {\n        ComputeJob storage job = computeJobs[jobId];\n        require(job.provider == msg.sender, \"Not job provider\");\n        require(job.status == JobStatus.Funded, \"Job not funded\");\n        \n        job.startTime = block.timestamp;\n        job.status = JobStatus.Started;\n        \n        // Mark node as busy\n        nodeActiveJobs[job.nodeId]++;\n        \n        emit ComputeJobStarted(jobId, block.timestamp);\n    }\n\n    /**\n     * @dev Complete a compute job (called by client or automatically)\n     */\n    function completeComputeJob(uint256 jobId) external {\n        ComputeJob storage job = computeJobs[jobId];\n        require(\n            job.client == msg.sender || job.provider == msg.sender,\n            \"Not authorized\"\n        );\n        require(job.status == JobStatus.Started, \"Job not started\");\n        \n        job.endTime = block.timestamp;\n        job.status = JobStatus.Completed;\n        \n        // Release node\n        nodeActiveJobs[job.nodeId]--;\n        \n        // Update node statistics\n        ComputeNode storage node = computeNodes[job.nodeId];\n        node.totalJobs++;\n        node.successfulJobs++;\n        \n        emit ComputeJobCompleted(jobId, block.timestamp);\n        \n        // Release payment after dispute window\n        _schedulePaymentRelease(jobId);\n    }\n\n    /**\n     * @dev Release payment to provider\n     */\n    function releasePayment(uint256 jobId) external nonReentrant {\n        ComputeJob storage job = computeJobs[jobId];\n        require(job.status == JobStatus.Completed, \"Job not completed\");\n        require(!job.disputed, \"Job disputed\");\n        require(\n            block.timestamp >= job.endTime + disputeTimeWindow || \n            msg.sender == job.client,\n            \"Dispute window not passed\"\n        );\n        \n        uint256 escrowAmount = jobEscrow[jobId];\n        require(escrowAmount > 0, \"Payment already released\");\n        \n        jobEscrow[jobId] = 0;\n        \n        uint256 platformFee = (job.totalCost * PLATFORM_FEE_PERCENT) / BASIS_POINTS;\n        uint256 providerAmount = job.totalCost;\n        \n        // Transfer to provider and platform\n        paymentToken.safeTransfer(job.provider, providerAmount);\n        paymentToken.safeTransfer(owner(), platformFee);\n        \n        emit PaymentReleased(jobId, job.provider, providerAmount);\n    }\n\n    /**\n     * @dev Raise a dispute\n     */\n    function raiseDispute(uint256 jobId, string memory reason) external {\n        ComputeJob storage job = computeJobs[jobId];\n        require(\n            job.client == msg.sender || job.provider == msg.sender,\n            \"Not authorized\"\n        );\n        require(job.status == JobStatus.Completed, \"Job not completed\");\n        require(!job.disputed, \"Already disputed\");\n        require(\n            block.timestamp <= job.endTime + disputeTimeWindow,\n            \"Dispute window passed\"\n        );\n        \n        job.disputed = true;\n        job.disputer = msg.sender;\n        job.disputeReason = reason;\n        \n        emit DisputeRaised(jobId, msg.sender, reason);\n    }\n\n    /**\n     * @dev Resolve dispute (called by platform admin)\n     */\n    function resolveDispute(uint256 jobId, bool favorProvider) external onlyOwner {\n        ComputeJob storage job = computeJobs[jobId];\n        require(job.disputed, \"No dispute\");\n        \n        uint256 escrowAmount = jobEscrow[jobId];\n        require(escrowAmount > 0, \"Payment already released\");\n        \n        jobEscrow[jobId] = 0;\n        \n        if (favorProvider) {\n            // Pay provider\n            uint256 platformFee = (job.totalCost * PLATFORM_FEE_PERCENT) / BASIS_POINTS;\n            paymentToken.safeTransfer(job.provider, job.totalCost);\n            paymentToken.safeTransfer(owner(), platformFee);\n            \n            // Update node statistics\n            ComputeNode storage node = computeNodes[job.nodeId];\n            node.successfulJobs++;\n        } else {\n            // Refund client\n            paymentToken.safeTransfer(job.client, escrowAmount);\n        }\n        \n        emit DisputeResolved(jobId, favorProvider);\n    }\n\n    /**\n     * @dev Cancel job before it starts\n     */\n    function cancelJob(uint256 jobId) external {\n        ComputeJob storage job = computeJobs[jobId];\n        require(job.client == msg.sender, \"Not job client\");\n        require(job.status == JobStatus.Funded, \"Cannot cancel\");\n        \n        job.status = JobStatus.Cancelled;\n        \n        // Refund client\n        uint256 escrowAmount = jobEscrow[jobId];\n        jobEscrow[jobId] = 0;\n        paymentToken.safeTransfer(job.client, escrowAmount);\n    }\n\n    /**\n     * @dev Get available nodes by type\n     */\n    function getAvailableNodes(string memory nodeType) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        uint256 count = 0;\n        \n        // Count available nodes of specified type\n        for (uint256 i = 1; i < nextNodeId; i++) {\n            if (computeNodes[i].available && \n                keccak256(bytes(computeNodes[i].nodeType)) == keccak256(bytes(nodeType))) {\n                count++;\n            }\n        }\n        \n        uint256[] memory availableNodes = new uint256[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 1; i < nextNodeId; i++) {\n            if (computeNodes[i].available && \n                keccak256(bytes(computeNodes[i].nodeType)) == keccak256(bytes(nodeType))) {\n                availableNodes[index] = i;\n                index++;\n            }\n        }\n        \n        return availableNodes;\n    }\n\n    /**\n     * @dev Get node information\n     */\n    function getNodeInfo(uint256 nodeId) \n        external \n        view \n        returns (ComputeNode memory) \n    {\n        return computeNodes[nodeId];\n    }\n\n    /**\n     * @dev Get job information\n     */\n    function getJobInfo(uint256 jobId) \n        external \n        view \n        returns (ComputeJob memory) \n    {\n        return computeJobs[jobId];\n    }\n\n    /**\n     * @dev Get provider's nodes\n     */\n    function getProviderNodes(address provider) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        return providerNodes[provider];\n    }\n\n    /**\n     * @dev Get client's jobs\n     */\n    function getClientJobs(address client) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        return clientJobs[client];\n    }\n\n    /**\n     * @dev Internal function to schedule payment release\n     */\n    function _schedulePaymentRelease(uint256 jobId) internal {\n        // In a more sophisticated implementation, this could trigger\n        // an external oracle or time-based release mechanism\n    }\n\n    /**\n     * @dev Emergency withdrawal (only owner)\n     */\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n    }\n\n    /**\n     * @dev Update platform fee (only owner)\n     */\n    function updatePlatformFee(uint256 newFeePercent) external onlyOwner {\n        require(newFeePercent <= 1000, \"Fee too high\"); // Max 10%\n        // Would need to update PLATFORM_FEE_PERCENT constant in upgraded version\n    }\n\n    /**\n     * @dev Update dispute time window (only owner)\n     */\n    function updateDisputeTimeWindow(uint256 newWindow) external onlyOwner {\n        disputeTimeWindow = newWindow;\n    }\n}\n"
    },
    "blockchain/contracts/EryzaStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title EryzaStaking\n * @dev Staking contract for ERYZA tokens with rewards distribution\n */\ncontract EryzaStaking is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    // Events\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event RewardsClaimed(address indexed user, uint256 reward);\n    event RewardsAdded(uint256 amount);\n\n    // Structs\n    struct UserInfo {\n        uint256 stakedAmount;\n        uint256 rewardDebt;\n        uint256 lastStakeTime;\n    }\n\n    // State variables\n    IERC20 public stakeToken; // ERYZA token\n    IERC20 public rewardToken; // ERYZA token (same as stake token)\n    \n    uint256 public totalStaked;\n    uint256 public rewardPerTokenStored;\n    uint256 public lastUpdateTime;\n    uint256 public rewardRate; // rewards per second\n    uint256 public rewardsDuration = 7 days;\n    uint256 public periodFinish;\n    \n    uint256 public constant MINIMUM_STAKE = 100 * 10**18; // 100 ERYZA minimum\n    uint256 public constant LOCK_PERIOD = 7 days; // 7 days lock period\n    \n    mapping(address => UserInfo) public userInfo;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n    \n    constructor(address _stakeToken, address _rewardToken) Ownable(msg.sender) {\n        stakeToken = IERC20(_stakeToken);\n        rewardToken = IERC20(_rewardToken);\n    }\n\n    /**\n     * @dev Update reward variables\n     */\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        \n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /**\n     * @dev Get last time reward applicable\n     */\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    /**\n     * @dev Calculate reward per token\n     */\n    function rewardPerToken() public view returns (uint256) {\n        if (totalStaked == 0) {\n            return rewardPerTokenStored;\n        }\n        \n        return rewardPerTokenStored + \n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / totalStaked);\n    }\n\n    /**\n     * @dev Calculate earned rewards for a user\n     */\n    function earned(address account) public view returns (uint256) {\n        UserInfo memory user = userInfo[account];\n        return (user.stakedAmount * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\n    }\n\n    /**\n     * @dev Stake tokens\n     */\n    function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {\n        require(amount >= MINIMUM_STAKE, \"Amount below minimum stake\");\n        require(amount > 0, \"Cannot stake 0\");\n        \n        UserInfo storage user = userInfo[msg.sender];\n        \n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\n        \n        user.stakedAmount += amount;\n        user.lastStakeTime = block.timestamp;\n        totalStaked += amount;\n        \n        emit Staked(msg.sender, amount);\n    }\n\n    /**\n     * @dev Unstake tokens\n     */\n    function unstake(uint256 amount) external nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot unstake 0\");\n        \n        UserInfo storage user = userInfo[msg.sender];\n        require(user.stakedAmount >= amount, \"Insufficient staked amount\");\n        require(\n            block.timestamp >= user.lastStakeTime + LOCK_PERIOD,\n            \"Tokens still locked\"\n        );\n        \n        user.stakedAmount -= amount;\n        totalStaked -= amount;\n        \n        stakeToken.safeTransfer(msg.sender, amount);\n        \n        emit Unstaked(msg.sender, amount);\n    }\n\n    /**\n     * @dev Claim rewards\n     */\n    function claimRewards() external nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardToken.safeTransfer(msg.sender, reward);\n            emit RewardsClaimed(msg.sender, reward);\n        }\n    }\n\n    /**\n     * @dev Exit staking (unstake all and claim rewards)\n     */\n    function exit() external {\n        UserInfo memory user = userInfo[msg.sender];\n        _unstake(user.stakedAmount);\n        _claimRewards();\n    }\n\n    /**\n     * @dev Internal unstake function\n     */\n    function _unstake(uint256 amount) internal updateReward(msg.sender) {\n        require(amount > 0, \"Cannot unstake 0\");\n        \n        UserInfo storage user = userInfo[msg.sender];\n        require(user.stakedAmount >= amount, \"Insufficient staked amount\");\n        require(\n            block.timestamp >= user.lastStakeTime + LOCK_PERIOD,\n            \"Tokens still locked\"\n        );\n        \n        user.stakedAmount -= amount;\n        totalStaked -= amount;\n        \n        stakeToken.safeTransfer(msg.sender, amount);\n        \n        emit Unstaked(msg.sender, amount);\n    }\n\n    /**\n     * @dev Internal claim rewards function\n     */\n    function _claimRewards() internal updateReward(msg.sender) {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 reward = user.rewardDebt;\n        if (reward > 0) {\n            user.rewardDebt = 0;\n            rewardToken.safeTransfer(msg.sender, reward);\n            emit RewardsClaimed(msg.sender, reward);\n        }\n    }\n\n    /**\n     * @dev Add rewards to the contract (only owner)\n     */\n    function addRewards(uint256 reward) external onlyOwner updateReward(address(0)) {\n        require(reward > 0, \"Cannot add 0 rewards\");\n        \n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward / rewardsDuration;\n        } else {\n            uint256 remaining = periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            rewardRate = (reward + leftover) / rewardsDuration;\n        }\n        \n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + rewardsDuration;\n        \n        rewardToken.safeTransferFrom(msg.sender, address(this), reward);\n        \n        emit RewardsAdded(reward);\n    }\n\n    /**\n     * @dev Set rewards duration (only owner)\n     */\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n        require(\n            block.timestamp > periodFinish,\n            \"Previous rewards period must be complete\"\n        );\n        rewardsDuration = _rewardsDuration;\n    }\n\n    /**\n     * @dev Get user staking info\n     */\n    function getUserInfo(address account) \n        external \n        view \n        returns (\n            uint256 stakedAmount,\n            uint256 earnedRewards,\n            uint256 lockTimeRemaining\n        ) \n    {\n        UserInfo memory user = userInfo[account];\n        stakedAmount = user.stakedAmount;\n        earnedRewards = earned(account);\n        \n        if (block.timestamp < user.lastStakeTime + LOCK_PERIOD) {\n            lockTimeRemaining = (user.lastStakeTime + LOCK_PERIOD) - block.timestamp;\n        } else {\n            lockTimeRemaining = 0;\n        }\n    }\n\n    /**\n     * @dev Get staking stats\n     */\n    function getStakingStats() \n        external \n        view \n        returns (\n            uint256 _totalStaked,\n            uint256 _rewardRate,\n            uint256 _periodFinish,\n            uint256 _rewardPerTokenStored\n        ) \n    {\n        _totalStaked = totalStaked;\n        _rewardRate = rewardRate;\n        _periodFinish = periodFinish;\n        _rewardPerTokenStored = rewardPerTokenStored;\n    }\n\n    /**\n     * @dev Emergency withdraw (only owner, for emergency situations)\n     */\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n    }\n}\n"
    },
    "blockchain/contracts/EryzaToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/**\n * @title EryzaToken (ERYZA)\n * @dev ERC20 token for the Eryza decentralized computing platform\n */\ncontract EryzaToken is ERC20, Ownable, Pausable {\n    \n    uint256 public constant MAX_SUPPLY = 1000000000 * 10**18; // 1 billion tokens\n    uint256 public constant INITIAL_SUPPLY = 100000000 * 10**18; // 100 million tokens\n    \n    // Token distribution percentages\n    uint256 public constant TEAM_PERCENT = 20; // 20%\n    uint256 public constant INVESTORS_PERCENT = 15; // 15%\n    uint256 public constant COMMUNITY_PERCENT = 30; // 30%\n    uint256 public constant TREASURY_PERCENT = 25; // 25%\n    uint256 public constant LIQUIDITY_PERCENT = 10; // 10%\n    \n    // Vesting addresses\n    address public teamVesting;\n    address public investorVesting;\n    address public communityRewards;\n    address public treasury;\n    address public liquidityPool;\n    \n    // Minting control\n    mapping(address => bool) public minters;\n    uint256 public totalMinted;\n    \n    event MinterAdded(address indexed minter);\n    event MinterRemoved(address indexed minter);\n    event TokensMinted(address indexed to, uint256 amount);\n    \n    modifier onlyMinter() {\n        require(minters[msg.sender], \"Not authorized minter\");\n        _;\n    }\n    \n    constructor(\n        address _teamVesting,\n        address _investorVesting,\n        address _communityRewards,\n        address _treasury,\n        address _liquidityPool\n    ) ERC20(\"Eryza Token\", \"ERYZA\") Ownable(msg.sender) {\n        teamVesting = _teamVesting;\n        investorVesting = _investorVesting;\n        communityRewards = _communityRewards;\n        treasury = _treasury;\n        liquidityPool = _liquidityPool;\n        \n        // Initial token distribution\n        _mint(_teamVesting, (INITIAL_SUPPLY * TEAM_PERCENT) / 100);\n        _mint(_investorVesting, (INITIAL_SUPPLY * INVESTORS_PERCENT) / 100);\n        _mint(_communityRewards, (INITIAL_SUPPLY * COMMUNITY_PERCENT) / 100);\n        _mint(_treasury, (INITIAL_SUPPLY * TREASURY_PERCENT) / 100);\n        _mint(_liquidityPool, (INITIAL_SUPPLY * LIQUIDITY_PERCENT) / 100);\n        \n        totalMinted = INITIAL_SUPPLY;\n    }\n    \n    /**\n     * @dev Add a minter address\n     */\n    function addMinter(address minter) external onlyOwner {\n        require(minter != address(0), \"Invalid minter address\");\n        minters[minter] = true;\n        emit MinterAdded(minter);\n    }\n    \n    /**\n     * @dev Remove a minter address\n     */\n    function removeMinter(address minter) external onlyOwner {\n        minters[minter] = false;\n        emit MinterRemoved(minter);\n    }\n    \n    /**\n     * @dev Mint new tokens (only by authorized minters)\n     */\n    function mint(address to, uint256 amount) external onlyMinter whenNotPaused {\n        require(to != address(0), \"Invalid recipient\");\n        require(totalMinted + amount <= MAX_SUPPLY, \"Exceeds max supply\");\n        \n        _mint(to, amount);\n        totalMinted += amount;\n        \n        emit TokensMinted(to, amount);\n    }\n    \n    /**\n     * @dev Burn tokens\n     */\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n    \n    /**\n     * @dev Burn tokens from another account (with allowance)\n     */\n    function burnFrom(address account, uint256 amount) external {\n        _spendAllowance(account, msg.sender, amount);\n        _burn(account, amount);\n    }\n    \n    /**\n     * @dev Pause token transfers (only owner)\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    /**\n     * @dev Unpause token transfers (only owner)\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    /**\n     * @dev Hook that is called before any transfer of tokens\n     */\n    function _update(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        require(!paused(), \"Token transfers paused\");\n        super._update(from, to, amount);\n    }\n    \n    /**\n     * @dev Get remaining mintable supply\n     */\n    function remainingSupply() external view returns (uint256) {\n        return MAX_SUPPLY - totalMinted;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}